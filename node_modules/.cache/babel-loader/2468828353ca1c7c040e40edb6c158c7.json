{"ast":null,"code":"import { SEARCH_LOGS, GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, SET_CURRENT, CLEAR_CURRENT, UPDATE_LOG } from \"./types\";\nimport M from 'materialize-css/dist/js/materialize'; // Get logs from server\n\nexport const getLogs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch('/logs');\n    const data = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.data\n    });\n  }\n}; //Add new log to db\n\nexport const addLog = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch('/logs', {\n      method: 'POST',\n      body: JSON.stringify(log),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.data\n    });\n  }\n}; //Delete logs from server db\n\nexport const deleteLog = id => async dispatch => {\n  try {\n    setLoading(); //true\n\n    await fetch(`/logs/${id}`, {\n      method: 'DELETE'\n    });\n    dispatch({\n      type: DELETE_LOG,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.data\n    });\n  }\n}; //Update log on server\n\nexport const updateLog = log => async dispatch => {\n  try {\n    setLoading(); //true\n\n    const res = await fetch(`/logs/${log.id}`, {\n      method: 'PATCH',\n      body: JSON.stringify(log),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    console.log(data);\n    dispatch({\n      type: UPDATE_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Get logs from server\n\nexport const searchLogs = text => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`/logs?q=${text}`);\n    const data = await res.json();\n\n    if (data.length === 0) {\n      M.toast({\n        html: `${text} not found`\n      });\n    }\n\n    dispatch({\n      type: SEARCH_LOGS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Set current log\n\nexport const setCurrentLog = log => {\n  return {\n    type: SET_CURRENT,\n    payload: log\n  };\n}; // clear current log\n\nexport const clearCurrentLog = () => {\n  return {\n    type: CLEAR_CURRENT,\n    payload: null\n  };\n}; //Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/alex/Documents/web/react/it-logger/src/redux/actions/logActions.js"],"names":["SEARCH_LOGS","GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","SET_CURRENT","CLEAR_CURRENT","UPDATE_LOG","M","getLogs","dispatch","setLoading","res","fetch","data","json","type","payload","err","response","addLog","log","method","body","JSON","stringify","headers","deleteLog","id","updateLog","console","statusText","searchLogs","text","length","toast","html","setCurrentLog","clearCurrentLog"],"mappings":"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","sourcesContent":["import { SEARCH_LOGS,GET_LOGS, SET_LOADING, LOGS_ERROR  , ADD_LOG,DELETE_LOG, SET_CURRENT, CLEAR_CURRENT,UPDATE_LOG} from \"./types\";\nimport M from 'materialize-css/dist/js/materialize'\n\n// Get logs from server\nexport const getLogs = () => async dispatch => {\n\n    try {\n        setLoading();\n\n        const res = await fetch('/logs');\n        const data = await res.json();\n\n        dispatch({\n            type:GET_LOGS,\n            payload: data\n        })\n    } catch (err) {\n       dispatch({\n            type: LOGS_ERROR,\n            payload:err.response.data\n        })\n    }\n   \n    \n};\n\n//Add new log to db\nexport const addLog = (log) => async dispatch=>{\n\n    try {\n\n        setLoading();\n\n        const res = await fetch('/logs' , {\n            method: 'POST',\n            body: JSON.stringify(log),\n            headers : {\n                'Content-Type': 'application/json'\n            }\n        });\n        const data = await res.json();\n\n        dispatch({\n            type:ADD_LOG,\n            payload: data\n        })\n    } catch (err) {\n       dispatch({\n            type: LOGS_ERROR,\n            payload:err.response.data\n        })\n    }\n   \n\n}\n\n//Delete logs from server db\nexport const deleteLog = (id) => async dispatch=>{\n \n    try {\n\n        setLoading(); //true\n    \n        await fetch(`/logs/${id}`,{\n            method: 'DELETE'\n        });\n     \n        dispatch({\n            type:DELETE_LOG,\n            payload: id\n        })\n       \n    } catch (err) {\n       dispatch({\n            type: LOGS_ERROR,\n            payload:err.response.data\n        })\n    }\n   \n\n}\n\n//Update log on server\nexport const updateLog = (log) => async dispatch=>{\n \n    try {\n\n        setLoading(); //true\n    \n        const res = await fetch(`/logs/${log.id}`,{\n            method: 'PATCH',\n            body: JSON.stringify(log),\n            headers : {\n                'Content-Type': 'application/json'\n            }\n        })\n\n        const data = await res.json();\n        console.log(data)\n\n        dispatch({\n            type:UPDATE_LOG,\n            payload: data\n        })\n       \n    } catch (err) {\n       dispatch({\n            type: LOGS_ERROR,\n            payload:err.response.statusText\n        })\n    }\n   \n\n}\n\n\n// Get logs from server\nexport const searchLogs = (text) => async dispatch => {\n\n    try {\n        setLoading();\n\n        const res = await fetch(`/logs?q=${text}`);\n        const data = await res.json();\n        if(data.length===0){\n            M.toast({html:`${text} not found`})\n        }\n     \n\n        dispatch({\n            type:SEARCH_LOGS,\n            payload: data\n        })\n    } catch (err) {\n       dispatch({\n            type: LOGS_ERROR,\n            payload:err.response.statusText\n        })\n    }\n   \n    \n};\n\n\n// Set current log\nexport const setCurrentLog = (log) => {\n  return {\n      type:SET_CURRENT,\n      payload: log\n  }\n}\n\n// clear current log\nexport const clearCurrentLog = () => {\n    return {\n        type:CLEAR_CURRENT,\n        payload: null\n    }\n  }\n  \n\n\n\n\n//Set loading to true\nexport const setLoading = () => {\n   return {\n       type:SET_LOADING\n   }\n};\n"]},"metadata":{},"sourceType":"module"}