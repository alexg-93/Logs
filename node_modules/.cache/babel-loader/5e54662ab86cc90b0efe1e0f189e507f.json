{"ast":null,"code":"import { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, SET_CURRENT, CLEAR_CURRENT, UPDATE_LOG, SEARCH_LOGS } from \"../actions/types\";\nconst initialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  error: null,\n  completedlogs: null\n};\n\nconst logReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_LOGS:\n      return { ...state,\n        logs: action.payload,\n        loading: false\n      };\n\n    case ADD_LOG:\n      return { ...state,\n        logs: [...state.logs, action.payload],\n        loading: false\n      };\n\n    case DELETE_LOG:\n      return { ...state,\n        logs: state.logs.filter(log => log.id !== action.payload),\n        loading: false\n      };\n\n    case UPDATE_LOG:\n      return { ...state,\n        logs: state.logs.map(log => log.id === action.payload.id ? action.payload : log),\n        current: null\n      };\n\n    case SEARCH_LOGS:\n      return { ...state,\n        logs: action.payload\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case SET_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case LOGS_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    case 'ADD_COMPLETED_LOG':\n      return { ...state,\n        completedlogs: [...state.completedlogs, action.payload],\n        loading: false\n      };\n\n    case 'GET_COMPLETED_LOGS':\n      return { ...state,\n        completed\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default logReducer;","map":{"version":3,"sources":["/Users/alex/Documents/web/react/it-logger/src/redux/reducers/logReducer.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","SET_CURRENT","CLEAR_CURRENT","UPDATE_LOG","SEARCH_LOGS","initialState","logs","current","loading","error","completedlogs","logReducer","state","action","type","payload","filter","log","id","map","completed"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,UALF,EAMEC,WANF,EAOEC,aAPF,EAQEC,UARF,EASEC,WATF,QAUO,kBAVP;AAYA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,KAAK,EAAE,IAJY;AAKnBC,EAAAA,aAAa,EAAC;AALK,CAArB;;AAQA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKlB,QAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELN,QAAAA,IAAI,EAAEO,MAAM,CAACE,OAFR;AAGLP,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKT,OAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELN,QAAAA,IAAI,EAAE,CAAC,GAAGM,KAAK,CAACN,IAAV,EAAgBO,MAAM,CAACE,OAAvB,CAFD;AAGLP,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKR,UAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELN,QAAAA,IAAI,EAAEM,KAAK,CAACN,IAAN,CAAWU,MAAX,CAAmBC,GAAD,IAASA,GAAG,CAACC,EAAJ,KAAWL,MAAM,CAACE,OAA7C,CAFD;AAGLP,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAKL,UAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELN,QAAAA,IAAI,EAAEM,KAAK,CAACN,IAAN,CAAWa,GAAX,CAAgBF,GAAD,IACnBA,GAAG,CAACC,EAAJ,KAAWL,MAAM,CAACE,OAAP,CAAeG,EAA1B,GAA+BL,MAAM,CAACE,OAAtC,GAAgDE,GAD5C,CAFD;AAKLV,QAAAA,OAAO,EAAC;AALH,OAAP;;AAQF,SAAKH,WAAL;AACE,aAAO,EAAE,GAAGQ,KAAL;AAAYN,QAAAA,IAAI,EAAEO,MAAM,CAACE;AAAzB,OAAP;;AAEF,SAAKd,WAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELL,QAAAA,OAAO,EAAEM,MAAM,CAACE;AAFX,OAAP;;AAIF,SAAKb,aAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELL,QAAAA,OAAO,EAAEM,MAAM,CAACE;AAFX,OAAP;;AAKF,SAAKlB,WAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELJ,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKV,UAAL;AAEE,aAAO,EAAE,GAAGc,KAAL;AAAYH,QAAAA,KAAK,EAAEI,MAAM,CAACE;AAA1B,OAAP;;AACF,SAAK,mBAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELF,QAAAA,aAAa,EAAC,CAAC,GAAGE,KAAK,CAACF,aAAV,EAA0BG,MAAM,CAACE,OAAjC,CAFT;AAGLP,QAAAA,OAAO,EAAC;AAHH,OAAP;;AAMF,SAAK,oBAAL;AACE,aAAO,EAAE,GAAGI,KAAL;AACAQ,QAAAA;AADA,OAAP;;AAGF;AACE,aAAOR,KAAP;AA/DJ;AAiED,CAlED;;AAoEA,eAAeD,UAAf","sourcesContent":["import {\n  GET_LOGS,\n  SET_LOADING,\n  LOGS_ERROR,\n  ADD_LOG,\n  DELETE_LOG,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_LOG,\n  SEARCH_LOGS,\n} from \"../actions/types\";\n\nconst initialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  error: null,\n  completedlogs:null\n};\n\nconst logReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_LOGS:\n      return {\n        ...state,\n        logs: action.payload,\n        loading: false,\n      };\n    case ADD_LOG:\n      return {\n        ...state,\n        logs: [...state.logs, action.payload],\n        loading: false,\n      };\n    case DELETE_LOG:\n      return {\n        ...state,\n        logs: state.logs.filter((log) => log.id !== action.payload),\n        loading: false,\n      };\n\n    case UPDATE_LOG:\n      return {\n        ...state,\n        logs: state.logs.map((log) =>\n          log.id === action.payload.id ? action.payload : log\n        ),\n        current:null\n      };\n\n    case SEARCH_LOGS:\n      return { ...state, logs: action.payload };\n\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case LOGS_ERROR:\n     \n      return { ...state, error: action.payload };\n    case 'ADD_COMPLETED_LOG':\n      return {\n        ...state,\n        completedlogs:[...state.completedlogs , action.payload],\n        loading:false\n      }\n\n    case 'GET_COMPLETED_LOGS':\n      return { ...state, \n             completed\n           }\n    default:\n      return state;\n  }\n};\n\nexport default logReducer;\n"]},"metadata":{},"sourceType":"module"}