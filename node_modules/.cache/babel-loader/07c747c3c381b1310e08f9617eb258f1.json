{"ast":null,"code":"import { ADD_TECH, GET_TECHS, TECHS_ERROR, DELETE_TECH, SET_LOADING, UPDATE_TECH, CLEAR_CURRENT_TECH, SET_CURRENT_TECH, SEARCH_TECHS } from \"./types\";\nimport M from 'materialize-css/dist/js/materialize'; // Get techs from server\n\nexport const getTechs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch('/techs');\n    const data = await res.json();\n    dispatch({\n      type: GET_TECHS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: TECHS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Add new log to db\n\nexport const addTech = tech => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch('/techs', {\n      method: 'POST',\n      body: JSON.stringify(tech),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_TECH,\n      payload: data\n    });\n  } catch (err) {\n    console.log(err);\n    console.log(err.response.data);\n    dispatch({\n      type: TECHS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Delete logs from server db\n\nexport const deleteTech = id => async dispatch => {\n  try {\n    setLoading(); //true\n\n    await fetch(`/techs/${id}`, {\n      method: 'DELETE'\n    });\n    dispatch({\n      type: DELETE_TECH,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: TECHS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Update tech on server\n\nexport const updateTech = tech => async dispatch => {\n  try {\n    setLoading(); //true\n\n    const res = await fetch(`/techs/${tech.id}`, {\n      method: 'PATCH',\n      body: JSON.stringify(tech),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_TECH,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: TECHS_ERROR,\n      payload: err.response.data\n    });\n  }\n}; //Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n}; // Set current tech\n\nexport const setCurrentTech = tech => {\n  return {\n    type: SET_CURRENT_TECH,\n    payload: tech\n  };\n}; // clear current tech\n\nexport const clearCurrentTech = () => {\n  return {\n    type: CLEAR_CURRENT_TECH,\n    payload: null\n  };\n}; // search techs from server\n\nexport const searchTechs = text => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`/techs?q=${text}`);\n    const data = await res.json();\n    dispatch({\n      type: SEARCH_TECHS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: TECHS_ERROR,\n      payload: err.response.data\n    });\n  }\n}; // Set current tech\n\nexport const setCurrenTech = tech => {\n  return {\n    type: SET_CURRENT_TECH,\n    payload: tech\n  };\n}; // clear current tech\n\nexport const clearCurrentLog = () => {\n  return {\n    type: CLEAR_CURRENT_TECH,\n    payload: null\n  };\n};","map":{"version":3,"sources":["/Users/alex/Documents/web/react/it-logger/src/redux/actions/techActions.js"],"names":["ADD_TECH","GET_TECHS","TECHS_ERROR","DELETE_TECH","SET_LOADING","UPDATE_TECH","CLEAR_CURRENT_TECH","SET_CURRENT_TECH","SEARCH_TECHS","M","getTechs","dispatch","setLoading","res","fetch","data","json","type","payload","err","response","statusText","addTech","tech","method","body","JSON","stringify","headers","console","log","deleteTech","id","updateTech","setCurrentTech","clearCurrentTech","searchTechs","text","setCurrenTech","clearCurrentLog"],"mappings":"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","sourcesContent":["import {ADD_TECH,GET_TECHS,TECHS_ERROR,DELETE_TECH,SET_LOADING,UPDATE_TECH,CLEAR_CURRENT_TECH,SET_CURRENT_TECH,SEARCH_TECHS} from \"./types\";\nimport M from 'materialize-css/dist/js/materialize'\n\n\n// Get techs from server\nexport const getTechs = () => async dispatch => {\n\n    try {\n        setLoading();\n        \n        const res = await fetch('/techs');\n        const data = await res.json();\n\n        dispatch({\n            type:GET_TECHS,\n            payload: data\n        })\n    } catch (err) {\n       dispatch({\n            type: TECHS_ERROR,\n            payload:err.response.statusText\n        })\n    }\n\n};\n\n\n//Add new log to db\nexport const addTech = (tech) => async dispatch=>{\n\n    try {\n\n        setLoading();\n\n        const res = await fetch('/techs' , {\n            method: 'POST',\n            body: JSON.stringify(tech),\n            headers : {\n                'Content-Type': 'application/json'\n            }\n        });\n        const data = await res.json();\n        \n        dispatch({\n            type:ADD_TECH,\n            payload: data\n        })\n    } catch (err) {\n        console.log(err)\n        console.log(err.response.data)\n       dispatch({\n            type: TECHS_ERROR,\n            payload:err.response.statusText\n        })\n    }\n   \n\n}\n\n//Delete logs from server db\nexport const deleteTech = (id) => async dispatch=>{\n \n    try {\n\n        setLoading(); //true\n    \n        await fetch(`/techs/${id}`,{\n            method: 'DELETE'\n        });\n     \n        dispatch({\n            type:DELETE_TECH,\n            payload: id\n        })\n       \n    } catch (err) {\n       dispatch({\n            type: TECHS_ERROR,\n            payload:err.response.statusText\n        })\n    }\n   \n\n}\n\n//Update tech on server\nexport const updateTech = (tech) => async dispatch=>{\n \n    try {\n\n        setLoading(); //true\n    \n        const res = await fetch(`/techs/${tech.id}`,{\n            method: 'PATCH',\n            body: JSON.stringify(tech),\n            headers : {\n                'Content-Type': 'application/json'\n            }\n        })\n\n        const data = await res.json();\n      \n\n        dispatch({\n            type:UPDATE_TECH,\n            payload: data\n        })\n       \n    } catch (err) {\n       dispatch({\n            type: TECHS_ERROR,\n            payload:err.response.data\n        })\n    }\n   \n\n}\n\n//Set loading to true\nexport const setLoading = () => {\n    return {\n        type:SET_LOADING\n    }\n };\n\n\n// Set current tech\nexport const setCurrentTech = (tech) => {\n    return {\n        type:SET_CURRENT_TECH,\n        payload: tech\n    }\n  }\n  \n  // clear current tech\n  export const clearCurrentTech = () => {\n      return {\n          type:CLEAR_CURRENT_TECH,\n          payload: null\n      }\n    }\n    \n  \n  \n// search techs from server\nexport const searchTechs = (text) => async dispatch => {\n\n    try {\n        setLoading();\n\n        const res = await fetch(`/techs?q=${text}`);\n        const data = await res.json();\n      \n        dispatch({\n            type:SEARCH_TECHS,\n            payload: data\n        })\n    } catch (err) {\n       dispatch({\n            type: TECHS_ERROR,\n            payload:err.response.data\n        })\n    }\n   \n    \n};\n\n\n// Set current tech\nexport const setCurrenTech = (tech) => {\n  return {\n      type:SET_CURRENT_TECH,\n      payload: tech\n  }\n}\n\n// clear current tech\nexport const clearCurrentLog = () => {\n    return {\n        type:CLEAR_CURRENT_TECH,\n        payload: null\n    }\n  }\n  \n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}